@page "/"
@inject IJSRuntime JsRuntime;

<h3>ビンゴカード</h3>
<div class="bingo-card-operations">
    <input id="GetCard" type="button" value="カードを取得" @onclick="GetBingoCard" />
    <div class="bingo-card-id-block">
        <label>カードID</label>
        <input id="CardID" type="text" class="bingo-card-id-text" @bind="bingoCardId" />
    </div>
    <div>
        <input id="GetGame" type="button" value="ゲーム情報を取得" />
        <label>@dischargedNumbers</label>
    </div>
</div>
<div class="bingo-card">
    <label class="bingo-card-title">ＢＩＮＧＯ</label>
    <div class="bingo-card-row">
        <div class="bingo-card-cell-frame"><input type="checkbox" id="cell1-1"><label class="bingo-card-cell" for="cell1-1">@numTable[0, 0]</label></div>
        <div class="bingo-card-cell-frame"><input type="checkbox" id="cell2-1"><label class="bingo-card-cell" for="cell2-1">@numTable[1, 0]</label></div>
        <div class="bingo-card-cell-frame"><input type="checkbox" id="cell3-1"><label class="bingo-card-cell" for="cell3-1">@numTable[2, 0]</label></div>
        <div class="bingo-card-cell-frame"><input type="checkbox" id="cell4-1"><label class="bingo-card-cell" for="cell4-1">@numTable[3, 0]</label></div>
        <div class="bingo-card-cell-frame"><input type="checkbox" id="cell5-1"><label class="bingo-card-cell" for="cell5-1">@numTable[4, 0]</label></div>
    </div>
    <div class="bingo-card-row">
        <div class="bingo-card-cell-frame"><input type="checkbox" id="cell1-2"><label class="bingo-card-cell" for="cell1-2">@numTable[0, 1]</label></div>
        <div class="bingo-card-cell-frame"><input type="checkbox" id="cell2-2"><label class="bingo-card-cell" for="cell2-2">@numTable[1, 1]</label></div>
        <div class="bingo-card-cell-frame"><input type="checkbox" id="cell3-2"><label class="bingo-card-cell" for="cell3-2">@numTable[2, 1]</label></div>
        <div class="bingo-card-cell-frame"><input type="checkbox" id="cell4-2"><label class="bingo-card-cell" for="cell4-2">@numTable[3, 1]</label></div>
        <div class="bingo-card-cell-frame"><input type="checkbox" id="cell5-2"><label class="bingo-card-cell" for="cell5-2">@numTable[4, 1]</label></div>
    </div>
    <div class="bingo-card-row">
        <div class="bingo-card-cell-frame"><input type="checkbox" id="cell1-3"><label class="bingo-card-cell" for="cell1-3">@numTable[0, 2]</label></div>
        <div class="bingo-card-cell-frame"><input type="checkbox" id="cell2-3"><label class="bingo-card-cell" for="cell2-3">@numTable[1, 2]</label></div>
        <div class="bingo-card-cell-frame"><input type="checkbox" id="cell3-3"><label class="bingo-card-cell" for="cell3-3">@numTable[2, 2]</label></div>
        <div class="bingo-card-cell-frame"><input type="checkbox" id="cell4-3"><label class="bingo-card-cell" for="cell4-3">@numTable[3, 2]</label></div>
        <div class="bingo-card-cell-frame"><input type="checkbox" id="cell5-3"><label class="bingo-card-cell" for="cell5-3">@numTable[4, 2]</label></div>
    </div>
    <div class="bingo-card-row">
        <div class="bingo-card-cell-frame"><input type="checkbox" id="cell1-4"><label class="bingo-card-cell" for="cell1-4">@numTable[0, 3]</label></div>
        <div class="bingo-card-cell-frame"><input type="checkbox" id="cell2-4"><label class="bingo-card-cell" for="cell2-4">@numTable[1, 3]</label></div>
        <div class="bingo-card-cell-frame"><input type="checkbox" id="cell3-4"><label class="bingo-card-cell" for="cell3-4">@numTable[2, 3]</label></div>
        <div class="bingo-card-cell-frame"><input type="checkbox" id="cell4-4"><label class="bingo-card-cell" for="cell4-4">@numTable[3, 3]</label></div>
        <div class="bingo-card-cell-frame"><input type="checkbox" id="cell5-4"><label class="bingo-card-cell" for="cell5-4">@numTable[4, 3]</label></div>
    </div>
    <div class="bingo-card-row">
        <div class="bingo-card-cell-frame"><input type="checkbox" id="cell1-5"><label class="bingo-card-cell" for="cell1-5">@numTable[0, 4]</label></div>
        <div class="bingo-card-cell-frame"><input type="checkbox" id="cell2-5"><label class="bingo-card-cell" for="cell2-5">@numTable[1, 4]</label></div>
        <div class="bingo-card-cell-frame"><input type="checkbox" id="cell3-5"><label class="bingo-card-cell" for="cell3-5">@numTable[2, 4]</label></div>
        <div class="bingo-card-cell-frame"><input type="checkbox" id="cell4-5"><label class="bingo-card-cell" for="cell4-5">@numTable[3, 4]</label></div>
        <div class="bingo-card-cell-frame"><input type="checkbox" id="cell5-5"><label class="bingo-card-cell" for="cell5-5">@numTable[4, 4]</label></div>
    </div>
</div>

<h3>使い方</h3>
<ul>
    <li>
        NameとPasscodeを入力して<label class="look-like-button">ビンゴをセット</label>ボタンを押すとサーバー側でゲーム情報が生成されます。
        <ul>
            <li>Name: ビンゴ識別子。ビンゴに参加する人にはこのNameを伝えてください</li>
            <li>Passcode: ビンゴ識別子に付随するパスコード。ビンゴを運営する人だけが知っていてください。</li>
        </ul>
    </li>
    <li><label class="look-like-button">ビンゴを削除</label>ボタンを押すと、ゲーム情報が削除されます。ゲーム終了時に押してください。ゲーム情報削除にはNameとPasscodeの入力が必要です。</li>
    <li><label class="look-like-button">ビンゴを回す</label>ボタンを押すと、次の数字が排出されます。同様にNameとPassscodeが必要です。</li>
    <li>
        <label class="look-like-button">カードを取得</label>ボタンを押すと、新しくカードが生成され、カードIDが表示されます。<br />
        カードIDがセットされた状態で<label class="look-like-button">カードを取得</label>ボタンを押すと、そのカード情報を取得できます。
    </li>
    <li><label class="look-like-button">ゲーム情報を取得</label>ボタンを押すと、ゲーム情報を取得してこれまでに出た数字のリストを表示します。</li>
</ul>

@code {
    // IDのデリミタ
    private static readonly string DELIMITER = "-";
    // 列数。奇数であること。
    private static readonly int COLUMNS = 5;
    // 行数。奇数であること。
    private static readonly int ROWS = 5;
    // 1列あたりでとりうる数字の範囲。
    private static readonly int COLUMN_RANGE = 15;
    // ビンゴカードの数字テーブル
    private string[,] numTable = new string[Index.COLUMNS, Index.ROWS];
    // ビンゴカードのID
    private string bingoCardId = "";
    // 排出された番号のリスト
    private string dischargedNumbers = "";

    /// <summary>
    /// カード取得メソッド
    /// </summary>
    private void GetBingoCard()
    {
        if (String.IsNullOrEmpty(this.bingoCardId))
        {
            this.CreateBingoCard();
        }
        else
        {
            this.CreateBingoCard(this.bingoCardId);
        }
    }

    /// <summary>
    /// カード生成メソッド
    /// </summary>
    private void CreateBingoCard()
    {
        StringBuilder sb = new StringBuilder();
        Random rand = new Random();

        for (int column = 0; column < Index.COLUMNS; column++)
        {
            for (int row = 0; row < Index.ROWS; row++)
            {
                if (row == Index.ROWS / 2 && column == Index.COLUMNS / 2)
                {
                    numTable[column, row] = "free";
                }
                else
                {
                    int number;
                    int r;
                    do
                    {
                        number = rand.Next(1, Index.COLUMN_RANGE + 1) + column * Index.COLUMN_RANGE;
                        for (r = 0; r < row; r++)
                        {
                            if (String.Equals(number.ToString(), this.numTable[column, r])) break;
                        }
                    } while (r < row);
                    this.numTable[column, row] = number.ToString();
                }
                if (row != 0 || column != 0)
                {
                    sb.Append(Index.DELIMITER);
                }
                sb.Append(numTable[column, row]);
            }
        }
        string encoded = this.EncodeToBase64(sb.ToString());
        this.bingoCardId = new string(encoded.Reverse().ToArray());
    }

    /// <summary>
    /// IDに相当するビンゴカードを生成する。
    /// </summary>
    /// <param name="id"></param>
    private async void CreateBingoCard(string id)
    {
        try
        {
            string reversed = new string(id.Reverse().ToArray());
            string[] numbers = this.DecodeFromBase64(reversed).Split(Index.DELIMITER);
            if (numbers.Length != Index.ROWS * Index.COLUMNS)
            {
                throw new ArgumentException("カードID");
            }
            // カードテーブルに落とし込む
            for (int column = 0; column < Index.COLUMNS; column++)
            {
                for (int row = 0; row < Index.ROWS; row++)
                {
                    numTable[column, row] = numbers[column * ROWS + row];
                }
            }
        }
        catch (Exception)
        {
            await JsRuntime.InvokeAsync<bool>("confirm", "カードIDが不正です。");
        }
    }

    /// <summary>
    /// Base64の文字列にエンコードする
    /// </summary>
    /// <param name="str">エンコード前の文字列</param>
    /// <returns>Base64エンコードされた文字列</returns>
    private string EncodeToBase64(string str)
    {
        return Convert.ToBase64String(Encoding.UTF8.GetBytes(str));
    }

    /// <summary>
    /// Base64文字列をデコードする
    /// </summary>
    /// <param name="str">Base64形式の文字列</param>
    /// <returns>Base64からデコードされた文字列</returns>
    private string DecodeFromBase64(string str)
    {
        return Encoding.UTF8.GetString(Convert.FromBase64String(str));
    }
}
